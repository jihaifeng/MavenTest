apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: releaseRepositoryUrl) {
                authentication(userName: mavenUserName, password: mavenPassword)

                println "开始上传release >>>"

            }
            snapshotRepository(url: snapshotRepositoryUrl) {
                authentication(userName: mavenUserName, password: mavenPassword)

                println "开始上传snapshot >>>"

            }
            def curArtifactId = ""

            android.libraryVariants.all { variant ->
                def _flavorBuildTypeName = variant.name

                println "build type: _flavorBuildTypeName = " + _flavorBuildTypeName

                def artifactId = getArtifactId(project)

                if (artifactId != curArtifactId) {

                    addFilter(_flavorBuildTypeName) { artifact, file ->
                        true
                    }

                    println "build type: artifactId = " + artifactId


                    pom(_flavorBuildTypeName).groupId = repositoryGroup
                    pom(_flavorBuildTypeName).artifactId = artifactId
                    pom(_flavorBuildTypeName).version = "1.0.3-SNAPSHOT"
                    pom(_flavorBuildTypeName).name = artifactId
                    pom(_flavorBuildTypeName).packaging = 'aar'

                    curArtifactId = artifactId

                } else {
                    println "has the same artifactId." + curArtifactId
                }
            }
        }
    }

//    task androidJavadocs(type: Javadoc) {
//        failOnError false
//        source = android.sourceSets.main.java.source
//        options {
//            encoding "UTF-8"
//            charSet 'UTF-8'
//            links "http://docs.oracle.com/javase/7/docs/api/"
//        }
//        classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//
//    }
//
//    task androidJavadocsJar(type: Zip, dependsOn: androidJavadocs) {
//        classifier = 'javadoc'
//        from androidJavadocs.destinationDir
//    }

    task androidSourcesJar(type: Jar) {
        description = 'Create sources JAR.'
        classifier = 'sources'

        def sourceDirs = new ArrayList()
        def sourceDir = android.sourceSets.main.java.srcDirs
        sourceDirs.add(sourceDir)

        android.libraryVariants.all { variant ->

            println "variant.flavorName： " + variant.flavorName

            if (variant.flavorName.empty) {
                return
            }

            def variantSrc = android.sourceSets.(variant.flavorName).java.srcDirs
            if (!sourceDirs.contains(variantSrc)) {
                sourceDirs.add(variantSrc)
            }

            def flavors = variant.getProductFlavors()
            for (int i = 0; i < flavors.size(); i++) {
                if (!variant.flavorName.toLowerCase().contains(flavors[i].name.toLowerCase())) {
                    continue
                }

                def flavorSrc = android.sourceSets.(flavors[i].name).java.srcDirs
                println "flavor src1： " + flavorSrc

                if (!sourceDirs.contains(flavorSrc)) {
                    sourceDirs.add(flavorSrc)
                }

            }

            from sourceDirs
        }

    }

    artifacts {

        println "start packing sources >>>"
        archives androidSourcesJar

//        println "start packing JavaDoc >>>"
//        archives androidJavadocsJar
    }
}

// logic_account_china_hms
static def getArtifactId(project) {
    def name = ""
    while (null != project.parent) {
        // 过滤掉impl的工程名
        if (!"impl".equalsIgnoreCase(project.name)) {
            // Ability的工程名改成Base
            if ("ability".equalsIgnoreCase(project.name)) {
                name = "base_" + name
            } else {
                if (name.empty) {
                    name = project.name
                } else {
                    name = project.name + "_" + name
                }

            }
        }
        project = project.parent
    }

    return name.toLowerCase()
}


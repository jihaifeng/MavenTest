apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: releaseRepositoryUrl) {
                authentication(userName: mavenUserName, password: mavenPassword)

                println "开始上传release >>>"

            }
            snapshotRepository(url: snapshotRepositoryUrl) {
                authentication(userName: mavenUserName, password: mavenPassword)

                println "开始上传snapshot >>>"

            }
            def curArtifactId = ""

            android.libraryVariants.all { variant ->
                def _flavorBuildTypeName = variant.name

                println "build type: _flavorBuildTypeName = " + _flavorBuildTypeName

                def artifactId = getArtifactId(project)

                if (artifactId != curArtifactId) {

                    addFilter(_flavorBuildTypeName) { artifact, file ->
                        true
                    }

                    println "build type: artifactId = " + artifactId


                    pom(_flavorBuildTypeName).groupId = repositoryGroup
                    pom(_flavorBuildTypeName).artifactId = artifactId
                    pom(_flavorBuildTypeName).version = "1.0.4-SNAPSHOT"
                    pom(_flavorBuildTypeName).name = artifactId
                    pom(_flavorBuildTypeName).packaging = 'aar'

                    // 远程依赖一起打包进pom文件，解决传递引用
                    pom(_flavorBuildTypeName).withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        configurations.compile.allDependencies.each {
                            if (isValidDependency(it)) {
//                                if (!configurations.embedded.allDependencies.contains(it)) {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
//                                }
                            }
                        }
                    }
                    curArtifactId = artifactId

                } else {
                    println "has the same artifactId.curArtifactId = " + curArtifactId
                }


            }
        }
    }




//    task androidJavadocs(type: Javadoc) {
//        failOnError false
//        source = android.sourceSets.main.java.source
//        options {
//            encoding "UTF-8"
//            charSet 'UTF-8'
//            links "http://docs.oracle.com/javase/7/docs/api/"
//        }
//        classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    android.libraryVariants.all { variant ->
//        if (variant.name == 'release') {
//            owner.classpath += variant.javaCompile.classpath
//        }
//    }
//    exclude '**/R.html', '**/R.*.html', '**/index.html'
//
//    }
//
//    task androidJavadocsJar(type: Zip, dependsOn: androidJavadocs) {
//        classifier = 'javadoc'
//        from androidJavadocs.destinationDir
//    }

    task androidSourcesJar(type: Jar) {
        description = 'Create sources JAR.'
        classifier = 'sources'
        baseName "AAAAA"

        def sourceDirs = new ArrayList()
        def sourceMainDir = android.sourceSets.main.java.srcDirs
        sourceDirs.add(sourceMainDir)

        android.libraryVariants.all { variant ->

            def curFlavorName = variant.flavorName

            if (curFlavorName.empty) {
                println "curFlavorName is empty.return"
                return
            }

            println "curFlavorName is = " + curFlavorName

            def flavors = variant.getProductFlavors()
            for (int i = 0; i < flavors.size(); i++) {

                println "flavors[i].name is = " + flavors[i].name

                if (!curFlavorName.equalsIgnoreCase(flavors[i].name)) {
                    continue
                }

                def flavorSrc = android.sourceSets.(flavors[i].name).java.srcDirs
                println "flavor src1： " + flavorSrc

                if (!sourceDirs.contains(flavorSrc)) {
                    sourceDirs.add(flavorSrc)
                }
            }
            println ">>>>>> source packing end.sourceDirs = " + sourceDirs + " \n"
            from sourceDirs
        }

    }

    artifacts {

        println "start packing sources >>>"

        archives androidSourcesJar

//        println "start packing JavaDoc >>>"
//        archives androidJavadocsJar
    }
}

static boolean isValidDependency(it) {
    return null != it.group && (null != it.name || "unspecified" == it
            .name) && null != it.version
}

// logic_account_china_hms
static def getArtifactId(project) {
    def name = ""
    while (null != project.parent) {
        // 过滤掉impl的工程名
        if (!"impl".equalsIgnoreCase(project.name)) {
            // Ability的工程名改成Base
            if ("ability".equalsIgnoreCase(project.name)) {
                name = "base_" + name
            } else {
                if (name.empty) {
                    name = project.name
                } else {
                    name = project.name + "_" + name
                }

            }
        }
        project = project.parent
    }

    return name.toLowerCase()
}

